# -*- coding: utf-8 -*-
# black: skip file
"""
CodeGemmaTransformer.py

GENERATED BY METAPROJECT.
"""
from __future__ import annotations
from typing import Any
from typing import TYPE_CHECKING

from locshapython.extension.utils.initialization_params import InitializationParams
from locshapython.extension import utils

if TYPE_CHECKING:
    import logging

class CodeGemmaTransformer:
    """
    CodeGemmaTransformer class is a base class for generated classes.
    """
    def __init__(self, **kwargs):
        self.__application_name = "llm"
        self._initialization_params = InitializationParams(**kwargs)

    def initialization_params(self) -> InitializationParams:
        """
        Get initialization parameters for the generated class.
        """
        return self._initialization_params

    def application_name(self):
        """Application name"""
        return self.__application_name

    def package_name(self):
        """Package name is an alias for application name"""
        return self.application_name()

    def keys(self) -> list:
        """
        Get keys from initialization params.
        """
        return list(
            filter(
                lambda x: not x.startswith('_'),
                self.initialization_params().__dict__.keys()
            )
        )

    def get(self, key, default=None) -> Any:
        """
        Get attribute value.
        """
        return getattr(self, key, default)

    def __getattr__(self, name: str, default=None) -> Any:
        """
        Get attribute value.
        """
        return self.__dict__.get(name) or default

    def to_dict(self) -> dict:
        """
        Convert generated class to dictionary.

        old: using list of tuples,
        return dict([
                 (key, self.initialization_params().get(key))
                 for key in self.keys()
               ])
        """
        return {key: self.initialization_params().get(key) for key in self.keys()}

    def as_dict(self) -> dict:
        """
        Alias for to_dict() method.
        """
        return self.to_dict()

    def logger(self) -> logging.Logger:
        """
        Return logger for the object.
        """
        return utils.get_logger(__class__.__name__)

    def attrs_to_string(self) -> list:
        """
        Convert attributes to string representation.
        """
        return [f"{key}={value}" for key, value in self.to_dict().items()]

    def __str__(self) -> str:
        """String representation of the generated class."""
        return f"{', '.join(self.attrs_to_string())}"

    def __repr__(self) -> str:
        """Representation of the generated class."""
        return f"MirrorFolder({', '.join(self.attrs_to_string())})"

    def inspect_object(self):
        """
        Inspect the generated class and return its attributes, properties, and methods.
        """
        instance_attrs = list(self.__dict__.keys())
        class_attrs = [
            k for k, v in self.__class__.__dict__.items()
            if not callable(v) and not isinstance(v, property)
        ]
        properties = [
            k for k, v in self.__class__.__dict__.items()
            if isinstance(v, property)
        ]
        methods = [
            k for k, v in self.__class__.__dict__.items()
            if callable(v)
        ]
        return {
            "instance_attributes": instance_attrs,
            "class_attributes": class_attrs,
            "properties": properties,
            "methods": methods,
        }

    def get_attr_raise(self, key):
        """
        Raise AttributeError instead KeyError.
        """
        try:
            return self.__dict__[key]
        except KeyError as e:
            raise AttributeError(f"Attribute {key} not found") from e

    @classmethod
    def cls_logger(cls) -> logging.Logger:
        """
        Return logger for the class.
        """
        return utils.get_logger(cls.__name__)

    @classmethod
    def from_dict(cls, *args, **kwargs) -> CodeGemmaTransformer:
        """
        Create an instance of the class from a dictionary.

        Args:
            params: Dictionary containing initialization parameters.
        """
        return cls(*args, **kwargs)
