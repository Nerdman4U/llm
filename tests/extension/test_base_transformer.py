"""
BaseTransformer.py

GENERATED BY METAPROJECT.
"""
# import os
import unittest
from unittest.mock import MagicMock, patch

from llm.extension.base_transformer import (
    BaseTransformer
)

from tests.extension import shared_test_methods
from tests.extension.base_test_class import BaseTestClass


class ConcreteBaseTransformer(BaseTransformer):
    """
    Concrete implementation of BaseTransformer for testing purposes.

    Imitate BertTransformer for testing.
    """

    def __init__(self):
        super().__init__()
        self.model_type = "BertModel"
        self.tokenizer_type = "BertTokenizer"
        self.transformers_model_name = "bert-base-uncased"


class TestBaseTransformer(BaseTestClass):
    """
    Test cases for BaseTransformer class.
    """

    def test_get_transformer_model_name(self):
        """
        Test the transformer_model_name property of BaseTransformer class.
        """
        obj = ConcreteBaseTransformer()
        self.assertTrue(obj.generated())
        self.assertEqual(obj.generated().transformers_model_name, "t5-base")
        self.assertEqual(obj.transformers_model_name, "bert-base-uncased")

    @patch("transformers.modeling_utils.PreTrainedModel.from_pretrained")
    def test_get_model(self, mock_model):
        """
        Test the get_model method of BaseTransformer class.
        """
        mock_model.return_value = MagicMock()
        obj = ConcreteBaseTransformer()
        self.assertEqual(obj.transformers_model_name, "bert-base-uncased")
        self.assertEqual(obj.model_type, "BertModel")
        self.assertEqual(obj.tokenizer_type, "BertTokenizer")
        model_type = obj.get_model()
        self.assertTrue(model_type)

    @patch("transformers.tokenization_utils.PreTrainedTokenizer.from_pretrained")
    def test_get_tokenizer(self, mock_tokenizer):
        """
        Test the get_tokenizer method of BaseTransformer class.
        """
        mock_tokenizer.return_value = MagicMock()
        obj = ConcreteBaseTransformer()
        self.assertEqual(obj.transformers_model_name, "bert-base-uncased")
        self.assertEqual(obj.model_type, "BertModel")
        self.assertEqual(obj.tokenizer_type, "BertTokenizer")
        tokenizer_type = obj.get_tokenizer()
        self.assertTrue(tokenizer_type)


if __name__ == '__main__':
    unittest.main()
